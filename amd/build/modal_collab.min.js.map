{"version":3,"sources":["../src/modal_collab.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","NewCollab","selector","contextid","discussionid","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","console","log","loadFragment","handleFormSubmissionResponse","hide","document","location","replace","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","split","d","map","element","push","obj","Object","fromEntries","discussions","submit"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     core_group/newgroup\n * @class      NewGroup\n * @package    core_group\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n/**\n* Constructor\n*\n* @param {String} selector used to find triggers for the new group modal.\n* @param {int} contextid\n*\n* Each call to init gets it's own instance of this class.\n*/\nvar NewCollab = function(selector, contextid) {\n this.contextid = contextid;\n this.discussionid = 0;\n this.init(selector);\n};\n\n/**\n* @var {Modal} modal\n* @private\n*/\nNewCollab.prototype.modal = null;\n\n/**\n* @var {int} contextid\n* @private\n*/\nNewCollab.prototype.contextid = -1;\n\n/**\n* Initialise the class.\n*\n* @param {String} selector used to find triggers for the new group modal.\n* @private\n* @return {Promise}\n*/\nNewCollab.prototype.init = function(selector) {\n var triggers = $(selector);\n // Fetch the title string.\n return Str.get_string('sharedmaterials', 'local_repositoryciae').then(function(title) {\n     // Create the modal.\n     return ModalFactory.create({\n         type: ModalFactory.types.SAVE_CANCEL,\n         title: title,\n         body: this.getBody()\n     }, triggers);\n }.bind(this)).then(function(modal) {\n     // Keep a reference to the modal.\n     this.modal = modal;\n\n     // Forms are big, we want a big modal.\n     this.modal.setLarge();\n\n     // We want to reset the form every time it is opened.\n     this.modal.getRoot().on(ModalEvents.hidden, function() {\n         this.modal.setBody(this.getBody());\n     }.bind(this));\n\n     // We want to hide the submit buttons every time it is opened.\n     this.modal.getRoot().on(ModalEvents.shown, function() {\n         this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n     }.bind(this));\n\n\n     // We catch the modal save event, and use it to submit the form inside the modal.\n     // Triggering a form submission will give JS validation scripts a chance to check for errors.\n     this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n     // We also catch the form submit event and use it to submit the form with ajax.\n     this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n     return this.modal;\n }.bind(this));\n};\n\n/**\n* @method getBody\n* @private\n* @return {Promise}\n*/\nNewCollab.prototype.getBody = function(formdata) {\n if (typeof formdata === \"undefined\") {\n     formdata = {};\n }\n // Get the content of the modal.\n var params = {jsonformdata: JSON.stringify(formdata)};\n console.log(params);\n return Fragment.loadFragment('local_repositoryciae', 'new_discussions_form', this.contextid, params);\n};\n\n/**\n* @method handleFormSubmissionResponse\n* @private\n* @return {Promise}\n*/\nNewCollab.prototype.handleFormSubmissionResponse = function() {\n this.modal.hide();\n // We could trigger an event instead.\n // Yuk.\n//  Y.use('moodle-core-formchangechecker', function() {\n//      M.core_formchangechecker.reset_form_dirty_state();\n//  });\n document.location.replace('collabfile.php?id='+this.discussionid);\n};\n\n/**\n* @method handleFormSubmissionFailure\n* @private\n* @return {Promise}\n*/\nNewCollab.prototype.handleFormSubmissionFailure = function(data) {\n // Oh noes! Epic fail :(\n // Ah wait - this is normal. We need to re-display the form with errors!\n this.modal.setBody(this.getBody(data));\n};\n\n/**\n* Private method\n*\n* @method submitFormAjax\n* @private\n* @param {Event} e Form submission event.\n*/\nNewCollab.prototype.submitFormAjax = function(e) {\n    // We don't want to do a real form submission.\n    e.preventDefault();\n\n    // var changeEvent = document.createEvent('HTMLEvents');\n    // changeEvent.initEvent('change', true, true);\n\n    // // Prompt all inputs to run their validation functions.\n    // // Normally this would happen when the form is submitted, but\n    // // since we aren't submitting the form normally we need to run client side\n    // // validation.\n    // this.modal.getRoot().find(':input').each(function(index, element) {\n    //     element.dispatchEvent(changeEvent);\n    // });\n\n    // // Now the change events have run, see if there are any \"invalid\" form fields.\n    // var invalid = $.merge(\n    //     this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n    //     this.modal.getRoot().find('.error')\n    // );\n\n    // // If we found invalid fields, focus on the first one and do not submit via ajax.\n    // if (invalid.length) {\n    //     invalid.first().focus();\n    //     return;\n    // }\n\n    // Convert all the form elements values to a serialised string.\n    var formData = this.modal.getRoot().find('form').serialize();\n    var data = formData.split(\"&\");\n    var d = [];\n    data.map(function(element){\n        d.push(element.split(\"=\"));\n    });\n    const obj = Object.fromEntries(d);\n    this.discussionid = obj.discussions;\n    console.log(e);\n    document.location.replace('collabfile.php?id='+obj.discussions);\n    //window.location.replace('collabfile.php?id='+ obj.discussions);\n    // Now we can continue...\n    // Ajax.call([{\n    //     methodname: 'local_repositoryciae_submit_create_collab_form',\n    //     args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n    //     done: this.handleFormSubmissionResponse.bind(this, formData),\n    //     fail: this.handleFormSubmissionFailure.bind(this, formData)\n    // }]);\n};\n\n/**\n* This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n*\n* @method submitForm\n* @param {Event} e Form submission event.\n* @private\n*/\nNewCollab.prototype.submitForm = function(e) {\n e.preventDefault();\n this.modal.getRoot().find('form').submit();\n};\n\nreturn /** @alias module:core_group/newgroup */ {\n // Public variables and functions.\n /**\n  * Attach event listeners to initialise this module.\n  *\n  * @method init\n  * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n  * @param {int} contextid The contextid for the course.\n  * @return {Promise}\n  */\n init: function(selector, contextid) {\n     return new NewCollab(selector, contextid);\n }\n};\n});"],"file":"modal_collab.min.js"}
{"version":3,"sources":["../src/imagePixelated.js"],"names":["init","valuePixel","pixelatedImage","document","querySelector","originalImage","cloneNode","pixelationElement","oninput","e","pixelateImage","parseInt","target","value","window","console","log","pixelationFactor","canvas","createElement","context","getContext","originalWidth","width","originalHeight","height","drawImage","originalImageData","getImageData","data","y","x","pixelIndexPosition","fillStyle","fillRect","src","toDataURL"],"mappings":"yJAAoB,QAAPA,CAAAA,IAAO,CAACC,CAAD,CAAgB,IAE5BC,CAAAA,CAAc,CAAGC,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAFW,CAI5BC,CAAa,CAAGH,CAAc,CAACI,SAAf,IAJY,CAK5BC,CAAiB,CAAGJ,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CALQ,CAOlCG,CAAiB,CAACC,OAAlB,CAA4B,SAACC,CAAD,CAAO,CACjCC,CAAa,CAACL,CAAD,CAAgBM,QAAQ,CAACF,CAAC,CAACG,MAAF,CAASC,KAAV,CAAxB,CACd,CAFD,CAGAH,CAAa,CAACL,CAAD,CAAgBM,QAAQ,CAACV,CAAD,CAAxB,CAAb,CACAa,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBf,CAAnB,EAEA,QAASS,CAAAA,CAAT,CAAuBL,CAAvB,CAAsCY,CAAtC,CAAwD,IAChDC,CAAAA,CAAM,CAAGf,QAAQ,CAACgB,aAAT,CAAuB,QAAvB,CADuC,CAEhDC,CAAO,CAAGF,CAAM,CAACG,UAAP,CAAkB,IAAlB,CAFsC,CAGhDC,CAAa,CAAGjB,CAAa,CAACkB,KAHkB,CAIhDC,CAAc,CAAGnB,CAAa,CAACoB,MAJiB,CAOtDP,CAAM,CAACK,KAAP,CAFoBD,CAEpB,CACAJ,CAAM,CAACO,MAAP,CAFqBD,CAErB,CACAJ,CAAO,CAACM,SAAR,CAAkBrB,CAAlB,CAAiC,CAAjC,CAAoC,CAApC,CAAuCiB,CAAvC,CAAsDE,CAAtD,EACA,GAAMG,CAAAA,CAAiB,CAAGP,CAAO,CAACQ,YAAR,CACxB,CADwB,CAExB,CAFwB,CAGxBN,CAHwB,CAIxBE,CAJwB,EAKxBK,IALF,CAMA,GAAyB,CAArB,GAAAZ,CAAJ,CAA4B,CAC1B,IAAK,GAAIa,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,CAApB,CAAoCM,CAAC,EAAIb,CAAzC,CAA2D,CACzD,IAAK,GAAIc,CAAAA,CAAC,CAAG,CAAR,CAEGC,CAFR,CAAgBD,CAAC,CAAGT,CAApB,CAAmCS,CAAC,EAAId,CAAxC,CAA0D,CAElDe,CAFkD,CAEH,CAA1B,EAACD,CAAC,CAAGD,CAAC,CAAGR,CAAT,CAF6B,CAIxDF,CAAO,CAACa,SAAR,8BACIN,CAAiB,CAACK,CAAD,CADrB,2BAEIL,CAAiB,CAACK,CAAkB,CAAG,CAAtB,CAFrB,2BAGIL,CAAiB,CAACK,CAAkB,CAAG,CAAtB,CAHrB,2BAIIL,CAAiB,CAACK,CAAkB,CAAG,CAAtB,CAJrB,kBAMAZ,CAAO,CAACc,QAAR,CAAiBH,CAAjB,CAAoBD,CAApB,CAAuBb,CAAvB,CAAyCA,CAAzC,CACD,CACF,CACF,CACDf,CAAc,CAACiC,GAAf,CAAqBjB,CAAM,CAACkB,SAAP,EACtB,CACF,C","sourcesContent":["export const init = (valuePixel) => {\r\n\r\n  const pixelatedImage = document.querySelector(\"#pixelatedImage\");\r\n  // storying a copy of the original image\r\n  const originalImage = pixelatedImage.cloneNode(true);\r\n  const pixelationElement = document.querySelector(\"#pixelationRange\");\r\n\r\n  pixelationElement.oninput = (e) => {\r\n    pixelateImage(originalImage, parseInt(e.target.value));\r\n  };\r\n  pixelateImage(originalImage, parseInt(valuePixel));\r\n  window.console.log(valuePixel);\r\n\r\n  function pixelateImage(originalImage, pixelationFactor) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const context = canvas.getContext(\"2d\");\r\n    const originalWidth = originalImage.width;\r\n    const originalHeight = originalImage.height;\r\n    const canvasWidth = originalWidth;\r\n    const canvasHeight = originalHeight;\r\n    canvas.width = canvasWidth;\r\n    canvas.height = canvasHeight;\r\n    context.drawImage(originalImage, 0, 0, originalWidth, originalHeight);\r\n    const originalImageData = context.getImageData(\r\n      0,\r\n      0,\r\n      originalWidth,\r\n      originalHeight\r\n    ).data;\r\n    if (pixelationFactor !== 0) {\r\n      for (let y = 0; y < originalHeight; y += pixelationFactor) {\r\n        for (let x = 0; x < originalWidth; x += pixelationFactor) {\r\n          // extracting the position of the sample pixel\r\n          const pixelIndexPosition = (x + y * originalWidth) * 4;\r\n          // drawing a square replacing the current pixels\r\n          context.fillStyle = `rgba(\r\n            ${originalImageData[pixelIndexPosition]},\r\n            ${originalImageData[pixelIndexPosition + 1]},\r\n            ${originalImageData[pixelIndexPosition + 2]},\r\n            ${originalImageData[pixelIndexPosition + 3]}\r\n          )`;\r\n          context.fillRect(x, y, pixelationFactor, pixelationFactor);\r\n        }\r\n      }\r\n    }\r\n    pixelatedImage.src = canvas.toDataURL();\r\n  }\r\n};"],"file":"imagePixelated.min.js"}